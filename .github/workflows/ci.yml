name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1 libgtk-3-0

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8

    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with Black
      run: |
        black --check src/

    - name: Run tests
      run: |
        pytest tests/ --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-acceleration:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

    - name: Install dependencies with acceleration
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install PyTorch (CPU)
      run: |
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu

    - name: Test acceleration module
      run: |
        python -c "
        import sys; sys.path.insert(0, 'src/utils')
        from acceleration import get_acceleration_manager, benchmark_acceleration
        accel = get_acceleration_manager()
        print(f'Acceleration: {accel.device_type}')
        "

    - name: Run acceleration benchmark
      run: |
        python src/utils/acceleration.py

  build-docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material

    - name: Build documentation
      run: |
        echo "Documentation build would go here"
        # mkdocs build

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.7
      with:
        inputs: requirements.txt